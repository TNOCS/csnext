<template v-if="node && node._outgoing">
    <div class="list-section">        
        <v-layout>
          <div @click="toggleExpand()" class="section-title" v-if="section.title">{{section.title}}<span v-if="!expanded"> ({{total}})</span></div><v-spacer></v-spacer>
          <v-btn icon v-if="node && node._isEditting"><v-icon>add</v-icon></v-btn>

          <v-btn v-if="expanded" @click="toggleExpand()" icon><v-icon>expand_more</v-icon></v-btn>
          <v-btn v-else @click="toggleExpand()" icon><v-icon>expand_less</v-icon></v-btn>
        </v-layout>
        <div class="d-flex flex-wrap" v-if="expanded">
          <node-link class="mr-2 list-item" v-for="(relation,inx) in list()" :source="source" :key="inx" :node="relation"></node-link>
          <v-btn v-if="total>10" text class="mr-2 list-item" @click="showMore = !showMore"><span v-if="showMore">show less</span><span v-else>show more</span></v-btn>
        </div>
        
    </div>
</template>

<style scoped>

.section-title {
  width: 100%;
  cursor: pointer;
}

.list-item {
  width: 30%;
  margin: 3px;
}
.list-section {
  margin: 5px;
  margin-bottom: 4px;
    margin-top: 10px;
    border-top-color: rgba(128, 128, 128, 0.2);
    border-top-width: 1px;
    border-top-style: solid;
}
</style>

<script lang="ts">
import { BaseSection } from './base-section';
import { Component, Vue, Watch } from "vue-property-decorator";
import { GraphElement } from '@/classes';

@Component({
  name: 'title-section'
})
export default class SimpleRelationListSection extends BaseSection {

  private showMore = false;
  private total?: number;
  
  private expanded = true;

  private toggleExpand() {
    this.expanded = !this.expanded;
  }

  private list() {        
    let res : any[] | undefined = [];
    if (this.section?.filter && this.node?._incomming) {
      res = this.node._incomming?.filter(r => r.from?.classId === this.section?.filter).map(r=> r.from); //.filter(r => r.classId === 'INSTANCE_OF');      
    } else if (this.section?.relation && this.section?.incomming && this.node?._outgoing) {      
      res = this.node._incomming?.filter(r => r.classId === this.section?.relation).map(r => r.from);      
    } else if (this.section?.relation && this.node?._outgoing) {      
      res = this.node._outgoing?.filter(r => r.classId === this.section?.relation).map(r => r.to);      
    } else {
      res = [];
    }
    this.total = res!.length;
    if (this.showMore || this.total < 11 ) {
      return res;
    } else {
      return res?.slice(0,11);
    }
  }

public mounted() {
    
}
     

}
</script>
