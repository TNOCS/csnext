<template v-if="node && node._outgoing">
    
    <div class="list-section">        
      <simple-relation-list-section v-for="(list,indx) in lists()" :key="indx" :source="source" :data="data" :node="node" :section="list" :featureType="featureType" :infoPanel="infoPanel"></simple-relation-list-section>
    </div>
<!-- 
        <div class="section-title" v-if="section.title">{{section.title}}</div>
        <div class="d-flex flex-wrap">
          <node-link class="mr-2 list-item" v-for="(relation,inx) in list()" :source="source" :key="inx" :node="relation"></node-link>
          <v-btn v-if="total>10" text class="mr-2 list-item" @click="showMore = !showMore"><span v-if="showMore">show less</span><span v-else>show more</span></v-btn>
        </div> -->
        
    </div>
</template>

<style scoped>

.list-item {
  width: 30%;
  margin: 3px;
}
.list-section {
  margin: 5px;
}
</style>

<script lang="ts">
import { BaseSection } from './base-section';
import { Component, Vue, Watch } from "vue-property-decorator";
import { GraphElement } from '@/classes';
import SimpleRelationListSection from './../data-sections/simple-relation-list-section.vue';
import { InfoPanelSection } from '@csnext/cs-data';

@Component({
  components: { SimpleRelationListSection },
  name: 'relation-sections'
})
export default class RelationListSections extends BaseSection {

  private showMore = false;
  private total?: number;

  private relationName(n?: string) {
    if (!n) { return '';}
    return n.toLowerCase().replaceAll('_', ' ');
  }

  private lists() {
    if (!this.node) { return []; }
    let res: InfoPanelSection[] = [];
    
    if (this.node._incomming) {
      let outgoing = this.node._incomming.filter(i => i.classId !== 'INSTANCE_OF');
      for (const o of outgoing) {
        if (res.findIndex(r => o.from && r.filter === o.from.classId) === -1) {
          res.push({ sectionType: 'simple-relation-list-section', title: `${o.from!.classId}`, filter: o.from!.classId })        
        }        
      }
    }

    if (this.node._outgoing) {
      let outgoing = this.node._outgoing.filter(i => i.classId !== 'INSTANCE_OF');
      for (const o of outgoing) {
        if (res.findIndex(r => o.to && r.relation === o.classId) === -1) {
          res.push({ sectionType: 'simple-relation-list-section', title: this.relationName(o.title ?? o.classId), relation: o.classId}); // filter: o.to!.classId })        
        }        
      }
    }


    // if (this.node._incomming) {
    //   let incomming = [...new Set(this.node._incomming.map(item => item.classId))];
    //   for (const i of incomming) {
    //     res.push({ sectionType: 'simple-relation-list-section', title: i, incomming: true, relation: i})        
    //   }
    // }
    return res;


  }


public mounted() {
    
}
     

}
</script>
